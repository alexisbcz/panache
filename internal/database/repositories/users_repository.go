package repositories

import (
	"context"
	"fmt"

	"github.com/alexisbcz/panache/internal/database/models"
	"github.com/jackc/pgx/v5/pgxpool"
)

type UsersRepository interface {
	// Store creates a user record in the database, mutating fields generated by the DBMS.
	Store(ctx context.Context, user *models.User) error
}

type usersRepository struct {
	dbpool *pgxpool.Pool
}

var _ UsersRepository = (*usersRepository)(nil)

func NewUsersRepository(dbpool *pgxpool.Pool) UsersRepository {
	return &usersRepository{
		dbpool: dbpool,
	}
}

func (r *usersRepository) Store(ctx context.Context, user *models.User) error {
	query := `
		INSERT INTO users (email, password)
		VALUES ($1, $2)
		RETURNING id, created_at, updated_at
	`

	err := r.dbpool.QueryRow(
		ctx,
		query,
		user.Email,
		user.Password,
	).Scan(&user.ID, &user.CreatedAt, &user.UpdatedAt)

	if err != nil {
		return fmt.Errorf("failed to store user: %w", err)
	}

	return nil
}
